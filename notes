powershell.exe is a wrapper for System.Management.Automation.dll
Cmdlet Structure: Vern-Noun (case-insensitive)
Cmdlets: Native to PowerShell.
Functions: Use Verb-Noun structure
Workflows
Ext. Commands
Aliases
Path Variables


Exercise Notes:
  Find Cmdlets:
    1. Update-Help
    2. Get-Command *process*
       Get-Command -noun process
       Get-Help *process*
    3. Get-Service
    4. Get-Help -Verb Write  
    5. Get-Command -Noun variable
    6. Get-Command
    7. Read-Host 
     
  Running Cmdlets:
    1. Get-Process
    2. Get-Process -Name s*
    3. "gal,"dir","echo","?","%","ft" | ForEach-Object {Get-Alias $_}
    4. Get-Command *firewall*
    5. New-Alias gh Get-Help
  
  Variables:
    $var1 = Get-Random -Minimum 25 -Maximum 50
    $var2 = Get-Random -Minimum 1 -Maximum 10

    $sum = $var1 + $var2
    $sub = $var1 - $var2
    $prod = $var1 * $var2
    $quo = $var1 / $var2

    "{0} + {1} = {2}" -f $var1,$var2,$sum
    "{0} - {1} = {2}" -f $var1,$var2,$sub
    "{0} * {1} = {2}" -f $var1,$var2,$prod
    "{0} / {1} = {2}" -f $var1,$var2,$quo
    
  The Pipeline:
    1. Get-Process | Where-Object{$_.StartTime} | Measure-Object -Property StartTime -Minimum -Maximum | Select-Object -Property Minimum,Maximum
    2. Get-Date | select DayOfWeek,(Get-Date).DayOfWeek
    3. Get-Command *Hotfix*, Get-Hotfix
    4. Get-Hotfix | Sort-Object -Property InstalledOn | Select-Object HotFixID,InstalledOn,InstalledBy
    5. Get-Hotfix | Sort-Object -Property Description | Select-Object Description,HotFixID,InstalledOn

  Custom Object:
    $WorkStation = [PSCustomObject]@{
      "PSComputerName" = "WIN-OPS"
      "OS" = "Microsoft Windows 10 Pro"
      "OSVersion" = "10.0.1945"
      "Manufacturer" = "SeaBIOS"
      "Disk" = "{\\WIN-OPS\root\cimv2:Win32_LogicalDisk.DeviceID='C:'}"
    }
    $WorkStation
    
  Comparison and Condition:
    $pattern = '[A-Za-z]{2}\d{2,5}'
    switch($pattern) {
      { $line1 -match $_ } {
        $line1 -match $pattern | out-null
        $model = $matches[0]
        "Yes, model number $model is on line one"
      }
      { $line2 -match $_ } {
        $line2 -match $pattern | out-null
        $model = $matches[0]
        "Yes, model number $model is on line two"
      }
      { $line1 -notmatch $_ } {
        "There is no model number on line one"
      }
      { $line2 -notmatch $_ } {
        "There is no model number on line two/"
      }
    }
  Looping and Iteration:
    Part1:
      $procs="notepad","msedge","mspaint"
      $procs | ForEach-Object {Start-Process $_}
      Get-Process
      $procs | ForEach-Object {Stop-Process -Name $_}
    
    Part2:
      $procs="notepad","msedge","mspaint"
      $procs | ForEach-Object {Start-Process $_}
      $file="$pwd\procs.txt"
      foreach($proc in $procs) {
        Get-Process | Where-Object{$_.Name -like $proc
        ForEach-Object{Add-Content $file $_.Id}
      }
      Get-Content $file | ForEach-Object {Stop-Process -Id $_}
      
    Part3:
      $procs="notepad","msedge","mspaint"
      $procs | ForEach-Object {Start-Process $_}
      foreach($proc in $procs){
        Get-Process | Where-Object{$_.Name -like $proc}
        Format-Table -Property id,name,starttime,totalprocessortime,virtualmemorysize,workingset64
      }
      $procs | ForEach-Object{Stop-Process -Name $_}

  Reverse Arrays:
    $randomarr= ((Get-Random -Minimum "-10" -Maximum "0")..(Get-Random -Minimum "1" -Maximum "20"))
    [array]::Reverse($randomarr)
  
  Arrays and Hash Tables:
    $employee1=@{}
    $employee1.First="Mary"
    $employee1.Last="Hopper"
    $employee1.ID="001"
    $employee1.Job= "Software Lead"
    $employee1.Username="mhopper001"
    $employee1.Status="Management"

    $employee2=@{}
    $employee1.First="John"
    $employee1.Last="Williams"
    $employee1.ID="002"
    $employee1.Job= "Web Developer"
    $employee1.Username="jwilliams002"
    $employee2.Status="Intermediate"

    $employee3=@{}
    $employee3.First="Alex"
    $employee3.Last="Moran"
    $employee3.ID="003"
    $employee3.Job= "Software Developer"
    $employee3.Username="amoran003"
    $employee3.Status="Entry Level"
    
  Create Functions:
    function Squared([Int]$num){
      return $num*$num  
    }
    Squared
    
    function Multi($val1,$val2,$val3){
      return $val1*$val2*$val3   
    }
    Multi
    
    Function OrdDate{
      $date=(get-date).DayOfYear
      $year=(get-date).Year
      Write-Host $year"-"$date
    }
    OrdDate

  Regex:
    function Get-NetInfo{
      $pattern = '.*?((\d{1,3}\.){3}\d{1,3})'
      $netinfo = ipconfig
      $ip = $netinfo -match "IPv4$pattern" | %{if($_ -match $pattern){$Matches[1]}}
      $subnet = $netinfo -match "Subnet$pattern" | %{if($_ -match $pattern){$Matches[1]}}
      $GW = $netinfo -match "Gateway$pattern" | %{if($_ -match $pattern){$Matches[1]}}
      "IP: {0}`nSubnet: {1}`nGateway: {2}" -f $ip,$subnet,$GW
    }
    Get-NetInfo
    
    function Get-UrlInfo{
      $ips = @()
      $file = gc .\dns.txt
      $regex = '(www\.[a-zA-Z0-9\-\.]+\.(com|org|net))'
      foreach($line in $file){
        if($line -match $file){
            $Matches[1]
            $ips += $matches[1]
        }
      }
      $ips.count
      $ips | sort | group
    }
    Get-UrlInfo

$myCar = New-Object object
Add-Member -MemberType NoteProperty -Name Color -Value Black -InputObject $myCar
Add-Member -me NoteProperty -in $myCar -na Make -Value Toyota
Add-Member -InputObject $myCar NoteProperty Model "Corolla"
Add-Member -MemberType ScriptMethod -InputObject $myCar -name Drive -Value { "out on road" }
$myCar | Add-Member ScriptMethod Park { "find the spot" }

$soldier = [PSCustomObject]@{
    "FirstName" = "Mike"
    "LastName" = "Oxnard"
    "MilitaryRank" = "SPC"
    "MOS" = "17C"
    "Position" = "Network Specialist"
}
$soldier

if (condition) {
  #code to execute if applicable
#}

$x = 11
if ($x -gt 10) {"$x is larger than 10"}

$x = 5
if($x -eq 5) {
  Write-Host "Condition is true - x is equal to 5"
}

if ("ABC" -ieq "Abc") {
  Write-Host "Example 1 - Condition Satisfied" -Foreground Green
}
else {
  Write-Host "Example 1 - Condition NOT Satisfied" -ForegroundColor Red
}

$x = 2
if ($x -eq 5) {
  Write-Host "Bob"
}
elseif ($x -eq 4) {
  Write-Host "Sue"
}
elseif ($x -eq 2) {
  Write-Host "Tom"
}
elseif ($x -eq 1) {
  Write-Host "Mary"
}
else {
  Write-Host "Who am I?"
}

$num = (Get-Random -Minimum 0 -Maximum 10)
if($num -lt 5) {
  "$num is less than 5"
}
elseif($num -eq 5) {
  "$num is exactly 5"
}
else {
  "$num is greater than 5"
}

Switch(10)
{
  (1 + 9) {
    "Correct"
  }
  (1 + 10) {
    "Wrong"
  }
  (11 - 1) {
    "Correctly Subtracted"
  }
  (1 - 11) {
    "Subtracted Incorrectly"
  }
}

$val = "Meg"
Switch($val) {
  Peter {"That's the father"}
  Lois {"That's the mother"}
  Stewie {"That's the youngest"}
  Chris {"That's the oldest"}
  default {"Nobody cares about you $val"}
}

$nums = 1,2,3,4,5
$nums | ForEach-Object{$_ * 2}

$sum = 0
$nums | ForEach-Object{$sum += $_}
$sum

$list = 'a', 'b', 'c', 'd'
$list | ForEach-Object{$_.ToUpper()}

Get-Process | select -First 10 | ForEach-Object{$_.name} | ForEach-Object{$_.ToUpper()}
Get-ChildItem | ForEach-Object{$_.Length / 1kb}

1..10 | ForEach-Object{$_ * 10}

foreach(item in gci c:\users\student\Desktop -Recurse 2>$null){$item.name}
Get-ChildItem | ForEach-Object{$_.name}

foreach($nums in 1..5){$nums * 2}
$nums | ForEach-Object{$_ * 2)

$num = 0
while ($num -lt 3) {
  $num
  $num++
}

$var = ""
while($var -ne "Marines") {
  $var = Read-Host "Which branch of the military is the best?"
}

$num = 0
do {
  $num
  $num ++
}while($num -lt 3)

Set-Content -path .\example.txt -value "A string"
Get-Content .\example.txt
Add-Content -path .\example.txt -value "another string"
"a third string" > .\example.txt (To Overwrite)
"a different string" >> .\example.txt (To Append)

$x=Get-Process
$x.GetType()
$x -is [array]
$x[0]
$x[0].GetType()
$array=1..20
$array2="World","hello",5,10,(Get-Date)
$array3=@()
$arr=1..10
$arr[7..$arr.Length]

$jagarr="joe,"jim","jan",(1,('apple','pear'),3),"jay"
$jagarr[3]=1 apple pear 3
$jagarr[3][0]=1
$jagarr[3][1][1]=pear

$a=1,2,3
$a+=@(4,5,6)

$mylist=@{First="john; Last="Doe"; Middle="Bon";Age=35}
$mylist["Last"]

$list=@{element1 =5, array1=1..5; array2=6,7,8}
$list.Keys

Enable-PSRemoting
Set-NetFirewallProfile -Name Public -Enabled False
Get-Item WSMan:\localhost\client\TrustedHosts
Set-Item WSMan:\localhost\client\TrustedHosts
Enter-PSSession -ComputerName <ip of computer> -Credential <username>

'GetHostByName' -csplit '(?<=[a-z])(?=[A-Z)'
'112233445566778899' -split '(?<=\G.{2})(?=.)'
'DEADBEEFCAFE' -split '(?<=\G[0-9a-f]{2})(?=.)' -join ':'

"I am `"Batman`" (` is an escape character)

"Here is another`nline of text" Output:
Here is another
line of text

"{0:n3}" -f 123.45678
123.457

^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$
"8.8.8.8" -as [ipaddress]

function <name>{
  <code>
}

function test-me{
  Write-Host "Hello World!"
}
test-me

function retest($value){
  if ($value){
    Write-Host -ForegroundColor Green "True"
  }
  else{
    Write-Host -ForegroundColor Red "False"
  }
}
retest
retest 1

function paramfunc{
  param(
    $param1='Nothing', $param2='why not?'
  )
  Write-Host "You just entered $param1 and $param2"
}
paramfunc
paramfunc Word1 Word2

function switchparam{
  param(
    [Switch]
    $DoSwitch
  )
  if ($DoSwitch){
    "I have been switched!"
  }
  else{
    "I have not been switched"
  }  
}

function permparam{
  param(
    [Parameter(Mandatory=$true)]
    $permpram
  )
  "Your name is $permpram"
}
permparam
permparam namely

function Dollars{
  param(
    [Parameter(Mandatory=$true, HelpMessage='Enter the number of Euros. '
    [Double]$Euro
  )
  $Dollar = $Euro * 1.06
  return "{0:n2}" -f $Dollar
}
Dollars


Cmdlet Binding:
  function check-user{
    [CmdletBinding(DefaultParameterSetName='A')]
    param(
      [Parameter(ParameterSetName='A',Mandatory=$true)]
      $name,
      [Parameter(ParameterSetName='B',Mandatory=$true)]
      $id,
      [Parameter(ParameterSetName='C',Mandatory=$true)]
      $username
    )
    $var=$PSCmdlet.ParameterSetName
    "The $var parameter set was chosen"
  }

  function add-marine{
    [CmdletBinding()]
    param(
      [Parameter(Mandatory=$true)][string]$firstname,
      [Parameter(Mandatory=$true)][string]$lastname,
      [Parameter(Mandatory=$true)][string]$rank,
      [Parameter(Mandatory=$true)][string]$MOS,
      [Parameter(Mandatory=$true)][string]$position
    )
      $Marine=[PSCustomObject]@{
        "First Name"=$firstname
        "Last Name"=$lastname
        "Rank"=$rank
        "MOS"=$MOS
        "Position"=$position
      }
      Return $Marine
  }

function test-user{
  [CmdletBinding(DefaultParameterSetName='Name')]
  param(
    [Parameter(ParameterSetName='Name', Position=0, Mandatory=$true)]
    [String]
    $name,
    [Parameter(ParameterSetName='ID', Position=0, Mandatory=$true)]
    [Int]
    $id
  )
  $set=$PSCmdlet.ParameterSetName
  "The $set parameter was selected"
  if($set -eq 'ID'){
    "Their ID is $id"
  }
  else{
    "Their name is $name"
  }
}

Function Blocks Syntax:
  function bare-bones{
    Begin{
      <code>
    }
    Process{
      <code>
    }
    End{
      <Code>
    }
  }
  

Practice Exam Solutions:
1. Return the product of arguments:
  return $var1*$var2*$var3*$var4
  
2. Returns value at the column index when key is found at 0 in a 2-d array
  foreach($item in $arr){
    if($item[0] -eq $key){
      return $item[9]
    }
  }
  return -1
    
3.Prompts user to input positive integers. Stop the loop if -1 is input and return the max positive integer in the input
    $max=0
    do{
    $userinput=[Int](Read-Host -Prompt "Enter positive integers")
    if($userinput -gt $max){
    $max=$userinput
    }

    }while($userinput -ne -1)
    return $max
    
4. Return the given line of text from a file given by an argument
  Get-Content $filename | Select -Index $whichline
  
5. Return child items from given path sort by name in ascending order
  Get-ChildItem $path | Sort-Object -Property Name
  
6. Return sum of all elements provided in pipeline
  $sum=0
	foreach($item in $input){
		$sum +=$item
	}
	Return $sum
  
7. Return all and only the commands whose noun is process
  Get-Command -Noun Process
  
8. Returns String followed by given argument
  'PowerShell is {0}' -f $adjective
  
  or
  
  return "PowerShell is $adjective"
  
9. Return true or false when argument is a valid or invalid IPv4 Address
  if($addr -as [ipaddress]){
    return $true
  }
  return $false
  
  or
  
  $ipex='^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
	if($addr -match $ipex){
		Return $true
	}
	else{
		Return $false
	}
  
10. Return true or false if file has or has not been changed since arg2 was computed
  return (Get-FileHash -Algorithm SHA256 -Path $filepath).hash -ne $lasthash
  

  
